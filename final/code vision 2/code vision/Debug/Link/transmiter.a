;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega32.h>
;#include <delay.h>
;#include <stdio.h>
;unsigned char ch;
;unsigned int ch_3;
;//flash unsigned char segment[]={0b0111111,0b0000110,0b1011011,0b1001111,0b1110110,0b1101101,0b1111101,0b0000111,0b11111 ...
;unsigned int speed(void){
; 0000 0008 unsigned int speed(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0009 switch(ch)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 000A {
; 0000 000B case 'j':
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000C   {
; 0000 000D   if((OCR0<=238)){
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 000E   OCR0=OCR0+17;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 000F   return OCR0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0010   }
; 0000 0011   else return OCR0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0012   }
;PCODE: $00000020 VOL: 0
; 0000 0013  case 'i':
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0014  {
; 0000 0015  if(OCR0>=17)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0016  {
; 0000 0017     OCR0=OCR0-17;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0018   return OCR0;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0019   }
; 0000 001A   else return OCR0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 001B  }
;PCODE: $00000033 VOL: 0
; 0000 001C  } }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;/*----------------------------*/
;void recive_data(void)
; 0000 0020 
; 0000 0021 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0022 while(!(UCSRA&(1<<RXC)));
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0023 ch=UDR;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0024 ch_3=0;
;PCODE: $00000041 VOL: 0
; 0000 0025 switch(ch)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0026 {
; 0000 0027 case 'z':OCR0=0;OCR2=0;break; //no_action
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0028 case 'j':OCR0=OCR2=speed();break;  //increase_speed_1
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0029 case 'i':OCR0=OCR2=speed();break;  //decrase_speed_1
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 002A 
; 0000 002B //motors_direction:
; 0000 002C //hint pin 0.1 for w motors pin 2.3 for l motors
; 0000 002D case 'e': {PORTA.0=PORTA.1=1;PORTA.2=PORTA.3=0;OCR0=OCR2=170;break;}   //moving anti clockwise
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 002E case 'f': {PORTA.0=PORTA.1=0;PORTA.2=PORTA.3=1;OCR0=OCR2=170;break; }  //moving clockwise
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 002F case 'g': {PORTA.0=PORTA.1=PORTA.2=PORTA.3=1;break;}   //moving forward
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0030 case 'h': {PORTA.0=PORTA.1=PORTA.2=PORTA.3=0;break;}   //moving reverse
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0031 
; 0000 0032 }
;PCODE: $0000008F VOL: 0
; 0000 0033 }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;/*----------------------------*/
;void metal_detector(void)
; 0000 0036 {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0037   if(PINA.4==1) PORTC.7=1;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0038   else PORTC.7=0;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0039 }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;/*------------------------------------*/
;
;void transmit_data(unsigned char ch_2)
; 0000 003D {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 003E  while(!(UCSRA&(1<<UDRE)));
;PCODE: $000000A2 VOL: 0
;	ch_2 -> Y+0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 003F  UDR=ch_2;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0040 
; 0000 0041 }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;/*--------------------------------------*/
;
;interrupt[EXT_INT0] void encoder_pulses(void)
; 0000 0045 {
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0046 if(ch_3==1);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0047 else{
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0048  switch(ch)
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0049 {
; 0000 004A case 'g':{transmit_data('A');ch_3=1;break;}
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 004B case 'h':{transmit_data('B');ch_3=1;break;}
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 004C }
;PCODE: $000000C6 VOL: 0
; 0000 004D }
;PCODE: $000000C7 VOL: 0
; 0000 004E }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;/*------------------------------*/
;
;
;
; void main (void)
; 0000 0054 {
;PCODE: $000000CB VOL: 0
; 0000 0055 UCSRB=(1<<RXEN)|(1<<TXEN);   //enable reciver and transmitter
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0056 UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);   //8bit data
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0057 UBRRL=0X47;   //initialize bauderate=9600
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0058 DDRB=0XFF;   //initialize ports
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0059 DDRD=0X82;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 005A DDRA=0X0F;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 005B DDRC=0XFF;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 005C PORTC=0X00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 005D TCCR0=0x6D;   //initialize pulse width nrmal mode counter0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 005E TCCR2=0X6F;    //initialize pulse width nrmal mode counter1
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 005F GICR=(1<<INT0); //enable int0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0060 MCUCR=(1<<ISC00)|(1<<ISC01); //initialize mode of operation for int 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0061 GIFR=(1<<INTF0);       //clear the interrupt flag
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0062 
; 0000 0063 #asm("sei");          //set global intterupt
;PCODE: $000000E6 VOL: 0
	sei
;PCODE: $000000E7 VOL: 0
; 0000 0064 while (1)
;PCODE: $000000E8 VOL: 0
; 0000 0065     {
; 0000 0066       //transmit_data('Z');
; 0000 0067        recive_data();
;PCODE: $000000E9 VOL: 0
; 0000 0068        metal_detector();
;PCODE: $000000EA VOL: 0
; 0000 0069     }
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 006A     }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
