
AVRASM ver. 2.1.30  D:\eslam\eng\Mine Sweeper\New folder\final\code vision 2\code vision\Debug\List\transmiter.asm Fri Jul 03 14:26:05 2015

D:\eslam\eng\Mine Sweeper\New folder\final\code vision 2\code vision\Debug\List\transmiter.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\eslam\eng\Mine Sweeper\New folder\final\code vision 2\code vision\Debug\List\transmiter.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\eslam\eng\Mine Sweeper\New folder\final\code vision 2\code vision\Debug\List\transmiter.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Evaluation
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _ch=R5
                 	.DEF _ch_3=R6
                 	.DEF _ch_3_msb=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0033 	JMP  __RESET
000002 940c 00c0 	JMP  _encoder_pulses
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 __RESET:
000033 94f8      	CLI
000034 27ee      	CLR  R30
000035 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000036 e0f1      	LDI  R31,1
000037 bffb      	OUT  GICR,R31
000038 bfeb      	OUT  GICR,R30
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003a e08d      	LDI  R24,(14-2)+1
00003b e0a2      	LDI  R26,2
00003c 27bb      	CLR  R27
                 __CLEAR_REG:
00003d 93ed      	ST   X+,R30
00003e 958a      	DEC  R24
00003f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000040 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000041 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000042 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000043 93ed      	ST   X+,R30
000044 9701      	SBIW R24,1
000045 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000046 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000047 bfed      	OUT  SPL,R30
000048 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000049 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004b e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004c 940c 00f1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <mega32.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;unsigned char ch;
                 ;unsigned int ch_3;
                 ;//flash unsigned char segment[]={0b0111111,0b0000110,0b1011011,0b1001111,0b1110110,0b1101101,0b1111101,0b0000111,0b11111 ...
                 ;unsigned int speed(void){
                 ; 0000 0008 unsigned int speed(void){
                 
                 	.CSEG
                 _speed:
                 ; .FSTART _speed
                 ; 0000 0009 switch(ch)
00004e 2de5      	MOV  R30,R5
00004f e0f0      	LDI  R31,0
                 ; 0000 000A {
                 ; 0000 000B case 'j':
000050 36ea      	CPI  R30,LOW(0x6A)
000051 e0a0      	LDI  R26,HIGH(0x6A)
000052 07fa      	CPC  R31,R26
000053 f441      	BRNE _0x6
                 ; 0000 000C   {
                 ; 0000 000D   if((OCR0<=238)){
000054 b7ec      	IN   R30,0x3C
000055 3eef      	CPI  R30,LOW(0xEF)
000056 f420      	BRSH _0x7
                 ; 0000 000E   OCR0=OCR0+17;
000057 b7ec      	IN   R30,0x3C
000058 5eef      	SUBI R30,-LOW(17)
000059 bfec      	OUT  0x3C,R30
                 ; 0000 000F   return OCR0;
00005a c00b      	RJMP _0x2060001
                 ; 0000 0010   }
                 ; 0000 0011   else return OCR0;
                 _0x7:
00005b c00a      	RJMP _0x2060001
                 ; 0000 0012   }
                 ; 0000 0013  case 'i':
                 _0x6:
00005c 36e9      	CPI  R30,LOW(0x69)
00005d e0a0      	LDI  R26,HIGH(0x69)
00005e 07fa      	CPC  R31,R26
00005f f449      	BRNE _0x5
                 ; 0000 0014  {
                 ; 0000 0015  if(OCR0>=17)
000060 b7ec      	IN   R30,0x3C
000061 31e1      	CPI  R30,LOW(0x11)
000062 f018      	BRLO _0xB
                 ; 0000 0016  {
                 ; 0000 0017     OCR0=OCR0-17;
000063 b7ec      	IN   R30,0x3C
000064 51e1      	SUBI R30,LOW(17)
000065 bfec      	OUT  0x3C,R30
                 ; 0000 0018   return OCR0;
                 ; 0000 0019   }
                 ; 0000 001A   else return OCR0;
                 _0xB:
                 _0x2060001:
000066 b7ec      	IN   R30,0x3C
000067 e0f0      	LDI  R31,0
000068 9508      	RET
                 ; 0000 001B  }
                 ; 0000 001C  } }
                 _0x5:
000069 9508      	RET
                 ; .FEND
                 ;
                 ;/*----------------------------*/
                 ;void recive_data(void)
                 ; 0000 0020 
                 ; 0000 0021 {
                 _recive_data:
                 ; .FSTART _recive_data
                 ; 0000 0022 while(!(UCSRA&(1<<RXC)));
                 _0xD:
00006a 9b5f      	SBIS 0xB,7
00006b cffe      	RJMP _0xD
                 ; 0000 0023 ch=UDR;
00006c b05c      	IN   R5,12
                 ; 0000 0024 ch_3=0;
00006d 2466      	CLR  R6
00006e 2477      	CLR  R7
                 ; 0000 0025 switch(ch)
00006f 2de5      	MOV  R30,R5
000070 e0f0      	LDI  R31,0
                 ; 0000 0026 {
                 ; 0000 0027 case 'z':OCR0=0;OCR2=0;break; //no_action
000071 37ea      	CPI  R30,LOW(0x7A)
000072 e0a0      	LDI  R26,HIGH(0x7A)
000073 07fa      	CPC  R31,R26
000074 f421      	BRNE _0x13
000075 e0e0      	LDI  R30,LOW(0)
000076 bfec      	OUT  0x3C,R30
000077 bde3      	OUT  0x23,R30
000078 c039      	RJMP _0x12
                 ; 0000 0028 case 'j':OCR0=OCR2=speed();break;  //increase_speed_1
                 _0x13:
000079 36ea      	CPI  R30,LOW(0x6A)
00007a e0a0      	LDI  R26,HIGH(0x6A)
00007b 07fa      	CPC  R31,R26
00007c f421      	BRNE _0x14
00007d dfd0      	RCALL _speed
00007e bde3      	OUT  0x23,R30
00007f bfec      	OUT  0x3C,R30
000080 c031      	RJMP _0x12
                 ; 0000 0029 case 'i':OCR0=OCR2=speed();break;  //decrase_speed_1
                 _0x14:
000081 36e9      	CPI  R30,LOW(0x69)
000082 e0a0      	LDI  R26,HIGH(0x69)
000083 07fa      	CPC  R31,R26
000084 f421      	BRNE _0x15
000085 dfc8      	RCALL _speed
000086 bde3      	OUT  0x23,R30
000087 bfec      	OUT  0x3C,R30
000088 c029      	RJMP _0x12
                 ; 0000 002A 
                 ; 0000 002B //motors_direction:
                 ; 0000 002C //hint pin 0.1 for w motors pin 2.3 for l motors
                 ; 0000 002D case 'e': {PORTA.0=PORTA.1=1;PORTA.2=PORTA.3=0;OCR0=OCR2=170;break;}   //moving anti clockwise
                 _0x15:
000089 36e5      	CPI  R30,LOW(0x65)
00008a e0a0      	LDI  R26,HIGH(0x65)
00008b 07fa      	CPC  R31,R26
00008c f441      	BRNE _0x16
00008d 9ad9      	SBI  0x1B,1
00008e 9ad8      	SBI  0x1B,0
00008f 98db      	CBI  0x1B,3
000090 98da      	CBI  0x1B,2
000091 eaea      	LDI  R30,LOW(170)
000092 bde3      	OUT  0x23,R30
000093 bfec      	OUT  0x3C,R30
000094 c01d      	RJMP _0x12
                 ; 0000 002E case 'f': {PORTA.0=PORTA.1=0;PORTA.2=PORTA.3=1;OCR0=OCR2=170;break; }  //moving clockwise
                 _0x16:
000095 36e6      	CPI  R30,LOW(0x66)
000096 e0a0      	LDI  R26,HIGH(0x66)
000097 07fa      	CPC  R31,R26
000098 f441      	BRNE _0x1F
000099 98d9      	CBI  0x1B,1
00009a 98d8      	CBI  0x1B,0
00009b 9adb      	SBI  0x1B,3
00009c 9ada      	SBI  0x1B,2
00009d eaea      	LDI  R30,LOW(170)
00009e bde3      	OUT  0x23,R30
00009f bfec      	OUT  0x3C,R30
0000a0 c011      	RJMP _0x12
                 ; 0000 002F case 'g': {PORTA.0=PORTA.1=PORTA.2=PORTA.3=1;break;}   //moving forward
                 _0x1F:
0000a1 36e7      	CPI  R30,LOW(0x67)
0000a2 e0a0      	LDI  R26,HIGH(0x67)
0000a3 07fa      	CPC  R31,R26
0000a4 f429      	BRNE _0x28
0000a5 9adb      	SBI  0x1B,3
0000a6 9ada      	SBI  0x1B,2
0000a7 9ad9      	SBI  0x1B,1
0000a8 9ad8      	SBI  0x1B,0
0000a9 c008      	RJMP _0x12
                 ; 0000 0030 case 'h': {PORTA.0=PORTA.1=PORTA.2=PORTA.3=0;break;}   //moving reverse
                 _0x28:
0000aa 36e8      	CPI  R30,LOW(0x68)
0000ab e0a0      	LDI  R26,HIGH(0x68)
0000ac 07fa      	CPC  R31,R26
0000ad f421      	BRNE _0x12
0000ae 98db      	CBI  0x1B,3
0000af 98da      	CBI  0x1B,2
0000b0 98d9      	CBI  0x1B,1
0000b1 98d8      	CBI  0x1B,0
                 ; 0000 0031 
                 ; 0000 0032 }
                 _0x12:
                 ; 0000 0033 }
0000b2 9508      	RET
                 ; .FEND
                 ;/*----------------------------*/
                 ;void metal_detector(void)
                 ; 0000 0036 {
                 _metal_detector:
                 ; .FSTART _metal_detector
                 ; 0000 0037   if(PINA.4==1) PORTC.7=1;
0000b3 9bcc      	SBIS 0x19,4
0000b4 c002      	RJMP _0x3A
0000b5 9aaf      	SBI  0x15,7
                 ; 0000 0038   else PORTC.7=0;
0000b6 c001      	RJMP _0x3D
                 _0x3A:
0000b7 98af      	CBI  0x15,7
                 ; 0000 0039 }
                 _0x3D:
0000b8 9508      	RET
                 ; .FEND
                 ;/*------------------------------------*/
                 ;
                 ;void transmit_data(unsigned char ch_2)
                 ; 0000 003D {
                 _transmit_data:
                 ; .FSTART _transmit_data
                 ; 0000 003E  while(!(UCSRA&(1<<UDRE)));
0000b9 93aa      	ST   -Y,R26
                 ;	ch_2 -> Y+0
                 _0x40:
0000ba 9b5d      	SBIS 0xB,5
0000bb cffe      	RJMP _0x40
                 ; 0000 003F  UDR=ch_2;
0000bc 81e8      	LD   R30,Y
0000bd b9ec      	OUT  0xC,R30
                 ; 0000 0040 
                 ; 0000 0041 }
0000be 9621      	ADIW R28,1
0000bf 9508      	RET
                 ; .FEND
                 ;/*--------------------------------------*/
                 ;
                 ;interrupt[EXT_INT0] void encoder_pulses(void)
                 ; 0000 0045 {
                 _encoder_pulses:
                 ; .FSTART _encoder_pulses
0000c0 920a      	ST   -Y,R0
0000c1 921a      	ST   -Y,R1
0000c2 92fa      	ST   -Y,R15
0000c3 936a      	ST   -Y,R22
0000c4 937a      	ST   -Y,R23
0000c5 938a      	ST   -Y,R24
0000c6 939a      	ST   -Y,R25
0000c7 93aa      	ST   -Y,R26
0000c8 93ba      	ST   -Y,R27
0000c9 93ea      	ST   -Y,R30
0000ca 93fa      	ST   -Y,R31
0000cb b7ef      	IN   R30,SREG
0000cc 93ea      	ST   -Y,R30
                 ; 0000 0046 if(ch_3==1);
0000cd e0e1      	LDI  R30,LOW(1)
0000ce e0f0      	LDI  R31,HIGH(1)
0000cf 15e6      	CP   R30,R6
0000d0 05f7      	CPC  R31,R7
0000d1 f089      	BREQ _0x44
                 ; 0000 0047 else{
                 ; 0000 0048  switch(ch)
0000d2 2de5      	MOV  R30,R5
0000d3 e0f0      	LDI  R31,0
                 ; 0000 0049 {
                 ; 0000 004A case 'g':{transmit_data('A');ch_3=1;break;}
0000d4 36e7      	CPI  R30,LOW(0x67)
0000d5 e0a0      	LDI  R26,HIGH(0x67)
0000d6 07fa      	CPC  R31,R26
0000d7 f411      	BRNE _0x48
0000d8 e4a1      	LDI  R26,LOW(65)
0000d9 c005      	RJMP _0x4E
                 ; 0000 004B case 'h':{transmit_data('B');ch_3=1;break;}
                 _0x48:
0000da 36e8      	CPI  R30,LOW(0x68)
0000db e0a0      	LDI  R26,HIGH(0x68)
0000dc 07fa      	CPC  R31,R26
0000dd f429      	BRNE _0x47
0000de e4a2      	LDI  R26,LOW(66)
                 _0x4E:
0000df dfd9      	RCALL _transmit_data
0000e0 e0e1      	LDI  R30,LOW(1)
0000e1 e0f0      	LDI  R31,HIGH(1)
0000e2 013f      	MOVW R6,R30
                 ; 0000 004C }
                 _0x47:
                 ; 0000 004D }
                 _0x44:
                 ; 0000 004E }
0000e3 91e9      	LD   R30,Y+
0000e4 bfef      	OUT  SREG,R30
0000e5 91f9      	LD   R31,Y+
0000e6 91e9      	LD   R30,Y+
0000e7 91b9      	LD   R27,Y+
0000e8 91a9      	LD   R26,Y+
0000e9 9199      	LD   R25,Y+
0000ea 9189      	LD   R24,Y+
0000eb 9179      	LD   R23,Y+
0000ec 9169      	LD   R22,Y+
0000ed 90f9      	LD   R15,Y+
0000ee 9019      	LD   R1,Y+
0000ef 9009      	LD   R0,Y+
0000f0 9518      	RETI
                 ; .FEND
                 ;/*------------------------------*/
                 ;
                 ;
                 ;
                 ; void main (void)
                 ; 0000 0054 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0055 UCSRB=(1<<RXEN)|(1<<TXEN);   //enable reciver and transmitter
0000f1 e1e8      	LDI  R30,LOW(24)
0000f2 b9ea      	OUT  0xA,R30
                 ; 0000 0056 UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);   //8bit data
0000f3 e8e6      	LDI  R30,LOW(134)
0000f4 bde0      	OUT  0x20,R30
                 ; 0000 0057 UBRRL=0X47;   //initialize bauderate=9600
0000f5 e4e7      	LDI  R30,LOW(71)
0000f6 b9e9      	OUT  0x9,R30
                 ; 0000 0058 DDRB=0XFF;   //initialize ports
0000f7 efef      	LDI  R30,LOW(255)
0000f8 bbe7      	OUT  0x17,R30
                 ; 0000 0059 DDRD=0X82;
0000f9 e8e2      	LDI  R30,LOW(130)
0000fa bbe1      	OUT  0x11,R30
                 ; 0000 005A DDRA=0X0F;
0000fb e0ef      	LDI  R30,LOW(15)
0000fc bbea      	OUT  0x1A,R30
                 ; 0000 005B DDRC=0XFF;
0000fd efef      	LDI  R30,LOW(255)
0000fe bbe4      	OUT  0x14,R30
                 ; 0000 005C PORTC=0X00;
0000ff e0e0      	LDI  R30,LOW(0)
000100 bbe5      	OUT  0x15,R30
                 ; 0000 005D TCCR0=0x6D;   //initialize pulse width nrmal mode counter0
000101 e6ed      	LDI  R30,LOW(109)
000102 bfe3      	OUT  0x33,R30
                 ; 0000 005E TCCR2=0X6F;    //initialize pulse width nrmal mode counter1
000103 e6ef      	LDI  R30,LOW(111)
000104 bde5      	OUT  0x25,R30
                 ; 0000 005F GICR=(1<<INT0); //enable int0
000105 e4e0      	LDI  R30,LOW(64)
000106 bfeb      	OUT  0x3B,R30
                 ; 0000 0060 MCUCR=(1<<ISC00)|(1<<ISC01); //initialize mode of operation for int 0
000107 e0e3      	LDI  R30,LOW(3)
000108 bfe5      	OUT  0x35,R30
                 ; 0000 0061 GIFR=(1<<INTF0);       //clear the interrupt flag
000109 e4e0      	LDI  R30,LOW(64)
00010a bfea      	OUT  0x3A,R30
                 ; 0000 0062 
                 ; 0000 0063 #asm("sei");          //set global intterupt
00010b 9478      	sei
                 ; 0000 0064 while (1)
                 _0x4A:
                 ; 0000 0065     {
                 ; 0000 0066       //transmit_data('Z');
                 ; 0000 0067        recive_data();
00010c df5d      	RCALL _recive_data
                 ; 0000 0068        metal_detector();
00010d dfa5      	RCALL _metal_detector
                 ; 0000 0069     }
00010e cffd      	RJMP _0x4A
                 ; 0000 006A     }
                 _0x4D:
00010f cfff      	RJMP _0x4D
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   2 r1 :   2 r2 :   0 r3 :   0 r4 :   0 r5 :   4 r6 :   3 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   2 
r24:   6 r25:   3 r26:  29 r27:   3 r28:   2 r29:   1 r30:  86 r31:  22 
x  :   2 y  :  26 z  :   0 
Registers used: 18 out of 35 (51.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  13 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :  12 cpi   :  13 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   0 jmp   :  22 ld    :  13 ldd   :   0 ldi   :  47 
lds   :   0 lpm   :   0 lsl   :   0 lsr   :   0 mov   :   3 movw  :   1 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  33 pop   :   0 push  :   0 rcall :   5 ret   :   5 
reti  :   1 rjmp  :  15 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   9 sbic  :   0 sbis  :   3 sbiw  :   1 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  15 std   :   0 sts   :   0 sub   :   0 subi  :   2 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 29 out of 116 (25.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000220    526     18    544   32768   1.7%
[.dseg] 0x000060 0x000260      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
